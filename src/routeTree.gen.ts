/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LineupsLoaderImport } from './routes/lineupsLoader'
import { Route as LineupsImport } from './routes/lineups'
import { Route as RouteImport } from './routes/Route'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const LineupsLoaderRoute = LineupsLoaderImport.update({
  id: '/lineupsLoader',
  path: '/lineupsLoader',
  getParentRoute: () => rootRoute,
} as any)

const LineupsRoute = LineupsImport.update({
  id: '/lineups',
  path: '/lineups',
  getParentRoute: () => rootRoute,
} as any)

const RouteRoute = RouteImport.update({
  id: '/Route',
  path: '/Route',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Route': {
      id: '/Route'
      path: '/Route'
      fullPath: '/Route'
      preLoaderRoute: typeof RouteImport
      parentRoute: typeof rootRoute
    }
    '/lineups': {
      id: '/lineups'
      path: '/lineups'
      fullPath: '/lineups'
      preLoaderRoute: typeof LineupsImport
      parentRoute: typeof rootRoute
    }
    '/lineupsLoader': {
      id: '/lineupsLoader'
      path: '/lineupsLoader'
      fullPath: '/lineupsLoader'
      preLoaderRoute: typeof LineupsLoaderImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Route': typeof RouteRoute
  '/lineups': typeof LineupsRoute
  '/lineupsLoader': typeof LineupsLoaderRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Route': typeof RouteRoute
  '/lineups': typeof LineupsRoute
  '/lineupsLoader': typeof LineupsLoaderRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Route': typeof RouteRoute
  '/lineups': typeof LineupsRoute
  '/lineupsLoader': typeof LineupsLoaderRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Route' | '/lineups' | '/lineupsLoader'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Route' | '/lineups' | '/lineupsLoader'
  id: '__root__' | '/' | '/Route' | '/lineups' | '/lineupsLoader'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RouteRoute: typeof RouteRoute
  LineupsRoute: typeof LineupsRoute
  LineupsLoaderRoute: typeof LineupsLoaderRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RouteRoute: RouteRoute,
  LineupsRoute: LineupsRoute,
  LineupsLoaderRoute: LineupsLoaderRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Route",
        "/lineups",
        "/lineupsLoader"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Route": {
      "filePath": "Route.tsx"
    },
    "/lineups": {
      "filePath": "lineups.tsx"
    },
    "/lineupsLoader": {
      "filePath": "lineupsLoader.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
